# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build DEB Package

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ARCH: ['x86_64']
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=name::$name"
      # https://stackoverflow.com/questions/61096521/how-to-use-gpg-key-in-github-actions
      # gpg --generate-key
      # gpg --export-secret-keys YOUR_ID_HERE | base64 > private.key
      - name: Configure GPG Key
        run: |
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
          gpg --list-secret-keys jiyecafe@gmail.com
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

      - name: Prepare
        run: |
          sudo apt-get install -y build-essential fakeroot devscripts debhelper # debmake lintian pbuilder

      - name: Build Deb Package
        run: |
          export BUILD_VERSION=${{ steps.tag.outputs.tag }}
          ls -l
          mkdir -p tmp/build
          export WINE=false
          tools/build-prepare.sh
          env WINE=false tools/build-deepin.sh ${{ steps.tag.outputs.tag }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: wechat-devtools-deb-${{ matrix.ARCH }}.build
          path: tmp/build
